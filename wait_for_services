#!/usr/bin/env python3
import os
import sys
import time
import socket
import logging
import argparse
import http.client

import docker
import docker.errors


def main():

    start = int(time.time())

    env = os.environ

    parser = argparse.ArgumentParser()
    parser.add_argument('-t', '--timeout', type=int, default=20)
    parser.add_argument('-d', '--retry-delay', type=int, default=2)
    parser.add_argument('-v', '--verbose', action='store_true', default=False)

    args = parser.parse_args()

    logging.basicConfig(
        stream=sys.stdout,
        format='%(levelname)s: %(message)s',
        level=100000,
    )
    log = logging.getLogger('wait_for_services')
    log.setLevel(logging.DEBUG if args.verbose else logging.INFO)

    breaks_at = time.time() + int(args.timeout)

    my_id = socket.gethostname()

    client = docker.from_env()

    label = None
    for container in client.containers.list(all=True):
        if container.id.startswith(my_id):
            if 'com.docker.compose.project' in container.labels:
                label = (
                    'com.docker.compose.project=%s'
                ) % container.labels['com.docker.compose.project']
                break

    if label is None:
        log.critical(
            'Cant find my project! Are you using me inside compose ?!')
        return 1

    for i in range(2):
        try:
            containers = client.containers.list(
                filters={'label': label}, all=True)
        except docker.errors.NotFound:
            time.sleep(args.retry_delay)
    containers = {
        c.labels['com.docker.compose.service']: c
        for c in containers
    }

    not_found = set()
    while time.time() < breaks_at and containers:
        time.sleep(args.retry_delay)
        for service in list(containers):
            container = containers[service]
            if container.id.startswith(my_id):
                containers.pop(service)
                continue
            try:
                container.reload()
            except docker.errors.NotFound:
                if service in not_found:
                    log.error('Container %s not found', service)
                    containers.pop(service)
                else:
                    # give a chance to start
                    not_found.add(service)
                continue

            # check the restart policy first
            config = container.attrs.get("HostConfig", {}) or {}
            policy = config.get("RestartPolicy", {}) or {}
            if policy.get("Name") == "no":
                # ignore if the container is allowed to crash
                log.debug('Ignoring %s. restart: no', service)
                containers.pop(service)
                continue

            labels = container.labels
            traefik_labels = {
                k: v for k, v in labels.items() if k.startswith('traefik')
            }
            use_traefik = any(list(traefik_labels))
            if service.startswith(('mysql', 'mariadb', 'postgresql')):
                # handle databases
                cmd = None
                if service.startswith(('mysql', 'mariadb')):
                    password = env.get('MYSQL_ROOT_PASSWORD')
                    if password:
                        cmd = (
                            'mysql -u root --password=%s -e "SELECT 1+1;"'
                        ) % password
                    else:
                        msg = 'No MYSQL_ROOT_PASSWORD'
                elif service.startswith('postgresql'):
                    s = service.replace('postgresql', 'postgres')
                    user_key = '%s_USER' % s.upper()
                    u = env.get(user_key)
                    if u:
                        u = {'u': u}
                        cmd = r"psql -U %(u)s -w -c 'SELECT 1+1;' %(u)s" % u
                    else:
                        msg = 'No %s available' % user_key
                if cmd:
                    rc = container.exec_run(cmd)
                    if rc.exit_code != 0:
                        msg = rc.output.decode('utf8', errors='replace')
                        log.debug('%s still failing: %s',
                                  service, msg.strip())
                    else:
                        log.info('%s is accepting connections' % service)
                        containers.pop(service)
                        continue
                else:
                    log.error('Cant check %s status. %s in environment.',
                              service, msg)
            elif use_traefik:
                traefik_rules = []
                for label, value in traefik_labels.items():
                    # check for traefik rule
                    if label.endswith('.rule') and 'Host:' in value:
                        traefik_rules.append(value)

                if traefik_rules:
                    # check if traefik_rules are available in traefik providers
                    conn = http.client.HTTPConnection(
                        '127.0.0.1', 8080, timeout=2)
                    conn.request("GET", "/api/providers")
                    resp = conn.getresponse()
                    data = resp.read()

                    rules = [rule.encode('utf8') for rule in traefik_rules]
                    rules = [rule for rule in rules if rule not in data]
                    rules = [rule.decode('utf8') for rule in rules]
                    msg = 'traefik provider found for %s (%s)'
                    if rules:
                        log.debug('No ' + msg, service, ', '.join(rules))
                        continue
                    else:
                        log.info(msg, service, ', '.join(rules))
                        containers.pop(service)
                        continue

                config = container.attrs['Config']
                ports = config.get('ExposedPorts') or []
                if len(ports) > 1:
                    # handle http ports
                    if '80/tcp' in ports:
                        ports = ['80/tcp']
                    elif '8080/tcp' in ports:
                        ports = ['8080/tcp']
                    else:
                        # dont mess with multiple ports/non http
                        # services...
                        containers.pop(service)
                        continue

                port = list(ports)[0]
                port, proto = port.split('/')
                if proto != 'tcp':
                    # dont mess with weird protos...
                    containers.pop(service)
                    continue

                url = 'http://%s:%s' % (service, port)
                try:
                    conn = http.client.HTTPConnection(
                        service, int(port), timeout=2)
                    conn.request("HEAD", "/")
                    resp = conn.getresponse()
                    log.debug(
                        '%s: %s/tcp (%s %s)',
                        service, port, resp.status, resp.reason)
                except Exception as e:
                    log.debug('%s %s => %r',
                              service, url, e)
                    continue
                else:
                    log.info(
                        '%s is accepting connections on %s/tcp (%s %s)',
                        service, port, resp.status, resp.reason)
                    containers.pop(service)
                    continue
            elif container.status == 'running':
                log.debug(service + ' is ' + container.status)
                containers.pop(service)
                continue

    # sleep a bit so traefik handle all connections
    time.sleep(1)
    duration = int(time.time()) - start
    if containers:
        log.info('Some services are still failing after %ss... (%s)',
                 duration, ', '.join(containers))
        return 1
    else:
        log.info('All services are ready! Lets go! (%ss)', duration)
        return 0


if __name__ == '__main__':
    sys.exit(main())
